//
//  MRWorkerTask.h
//  MRWorker
//
//  Copyright (c) 2013 Marc Ransome <marc.ransome@fidgetbox.co.uk>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to
//  deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
//  sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//

#import <Foundation/Foundation.h>

@protocol MRWorkerOperationDelegate;

@interface MRWorkerOperation : NSOperation

/**-----------------------------------------------------------------------------
 * @name Initialising a Worker Operation
 * -----------------------------------------------------------------------------
 */

/** Returns an initialized `MRWorkerOperation` object with the specified launch
 * path, arguments, output block and completion block.
 *
 * @param launchPath The path to the executable.
 * @param arguments An array of `NSString` objects representing arguments to the
 * operation, or `nil` if none required. Arguments should be specified in the
 * same order that they should be passed to the executable.
 * @param outputBlock A block to be called when output is generated by the
 * executable. The block takes the following parameters:
 *
 *   - *output* A line of output generated by the executable and sent to the
 * standard output stream.
 * @param completionBlock A block to be called when the executable terminates.
 * The block takes the following parameters:
 *
 *   - *terminationStatus* The exit status returned by the executable.
 * @return An initialised worker operation object.
 */
- (instancetype) initWithLaunchPath:(NSString *)launchPath arguments:(NSArray *)arguments outputBlock:(void (^)(NSString *output))outputBlock completionBlock:(void (^)(int terminationStatus))completionBlock;

/**-----------------------------------------------------------------------------
 * @name Creating a Worker Operation
 * -----------------------------------------------------------------------------
 */

/** Returns a worker operation with the specified launch path, arguments, output
 * block and completion block.
 *
 * @param launchPath The path to the executable.
 * @param arguments An array of `NSString` objects representing arguments to the
 * operation, or `nil` if none required. Arguments should be specified in the
 * same order that they should be passed to the executable.
 * @param outputBlock A block to be called when output is generated by the
 * executable. The block takes the following parameters:
 *
 *   - *output* A line of output generated by the executable and sent to the
 * standard output stream.
 * @param completionBlock A block to be called when the executable terminates.
 * The block takes the following parameters:
 *
 *   - *terminationStatus* The exit status returned by the executable.
 * @return A new worker operation object.
 */
+ (instancetype)workerOperationWithLaunchPath:(NSString *)launchPath arguments:(NSArray *)arguments outputBlock:(void (^)(NSString *output))outputBlock completionBlock:(void (^)(int terminationStatus))completionBlock;

@end
